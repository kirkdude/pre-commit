---
name: Auto Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  auto-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for version calculation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email \
            "github-actions[bot]@users.noreply.github.com"

      - name: Determine next version
        id: version
        run: |
          # Get the current version from the last tag
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || \
            echo "v0.0.0")
          echo "Current version: $CURRENT_VERSION"

          # Remove 'v' prefix for processing
          CURRENT_VERSION_NUM=${CURRENT_VERSION#v}

          # Extract PR labels to determine version bump type
          PR_LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
          echo "PR Labels: $PR_LABELS"

          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION_NUM"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}

          # Determine version bump based on PR labels
          if echo "$PR_LABELS" | grep -q "breaking"; then
            # Major version bump for breaking changes
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$PR_LABELS" | grep -q "feature\|enhancement"; then
            # Minor version bump for new features
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            # Patch version bump for bug fixes and other changes
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release
        run: |
          # Make the release script executable
          chmod +x scripts/create_release.sh

          # Check git status
          git status --porcelain

          # Create the release using our script
          ./scripts/create_release.sh --push \
            ${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG_NAME="v${VERSION}"

          # Create release notes
          cat > release_notes.md << 'EOF'
          ## Changes in this release

          This release was automatically created from PR \
          #${{ github.event.pull_request.number }}: \
          ${{ github.event.pull_request.title }}

          **PR Description:**
          ${{ github.event.pull_request.body }}

          **Merged by:** @${{ github.event.pull_request.user.login }}
          **Merge commit:** ${{ github.event.pull_request.merge_commit_sha }}

          ### Pre-commit Configuration Updates

          This release includes updates to the pre-commit hook configuration:
          - Updated hook versions and configurations
          - New or modified linting rules
          - Security and code quality improvements

          ### Release Assets

          - Source code archives are available below
          - Pre-commit configuration ready to use
          - Release created automatically by GitHub Actions

          ---

          ðŸ¤– Generated with GitHub Actions
          EOF

          # Create the release using GitHub CLI with assets if they exist
          RELEASE_ARGS=(
            "$TAG_NAME"
            --title "Release $TAG_NAME"
            --notes-file release_notes.md
            --latest
          )

          # Add release assets if they exist
          if [ -f "releases/pre-commit-config-v${VERSION}.tar.gz" ]; then
            RELEASE_ARGS+=("releases/pre-commit-config-v${VERSION}.tar.gz")
          fi

          if [ -f "releases/pre-commit-config-v${VERSION}.zip" ]; then
            RELEASE_ARGS+=("releases/pre-commit-config-v${VERSION}.zip")
          fi

          gh release create "${RELEASE_ARGS[@]}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
